hit(rnorm(10000))
hist(rnorm(10000))
exit
exit()
v1 = 1:4
v2 = 5:9
v3 = 9:12
v2 = 5:8
mymatrix = cbind(v1, v2, v3)
mymatrix
mymatrix = rbind(v1, v2, v3)
mymatrix
mymatrix = cbind(v1, v2, v3)
mymatrix
mymatrix[c(1), c(1)]
mymatrix[c(1), c(3)]
quit()
?read.csv()
#Generate the relevant Fibonacci numbers and save them as fib
i = 2
while(fib[i] <= 4e6){
fib[i+1] = fib[i-1] + fib[i]
i = i+1
}
fib = fib[-i]
#Generate the relevant Fibonacci numbers and save them as fib
i = 2
fib = c(1,2)
while(fib[i] <= 4e6){
fib[i+1] = fib[i-1] + fib[i]
i = i+1
}
fib = fib[-i]
sum(fib[fib%%2 == 0])
fib = c(1,2)
while(fib[i] <= 4e6){
fib[i+1] = fib[i-1] + fib[i]
i = i+1
}
sum(fib[fib%%2 == 0])
sum(fib[fib%%2 == 0])
fib = c(1,2)
while(fib[i] <= 4e6){
fib[i+1] = fib[i-1] + fib[i]
i = i+1
}
#Generate the relevant Fibonacci numbers and save them as fib
i = 2
fib = c(1,2)
while(fib[i] <= 4e6){
fib[i+1] = fib[i-1] + fib[i]
i = i+1
}
sum(fib[fib%%2 == 0])
#Memory friendly solution
a = 1
b = 2
fib_sum2 = 0
while (b < 4e6){
if (b %%2 == 0){
fib_sum = fib_sum + b
}
temp = b
b = a + b
a = temp
}
#Memory friendly solution
a = 1
b = 2
fib_sum2 = 0
while (b < 4e6){
if (b %%2 == 0){
fib_sum2 = fib_sum2 + b
}
temp = b
b = a + b
a = temp
}
fib_sum2
#Academy Solution
matrix_multiplication_academy = function(mat, vec){
stopifnot(is.matrix(mat), is.numeric(vec), length(vec)>0, ncol(mat)==length(vec))
row_count = nrow(mat)
result = numeric(row_counts)
for(i in 1:row_count){
result[i] = sum(mat[i,] * vec)
}
return(result)
}
matrixA = matrix(1:12, 3, 4)
vectorA = c(1:3)
matrix_multiplication_academy(matrixA,vectorA)
matrixA = matrix(1:12, 3, 4)
vectorA = c(1:4)
matrix_multiplication_academy(matrixA,vectorA)
#Academy Solution
matrix_multiplication_academy = function(mat, vec){
stopifnot(is.matrix(mat), is.numeric(vec), length(vec)>0, ncol(mat)==length(vec))
row_count = nrow(mat)
result = numeric(row_count)
for(i in 1:row_count){
result[i] = sum(mat[i,] * vec)
}
return(result)
}
matrixA = matrix(1:12, 3, 4)
vectorA = c(1:4)
matrix_multiplication_academy(matrixA,vectorA)
#Academy Solution
matrix_multiplication_academy = function(mat, vec){
stopifnot(is.matrix(mat), is.numeric(vec), length(vec)>0, ncol(mat)==length(vec))
row_count = nrow(mat)
result = numeric(row_count)
for(i in 1:row_count){
result[i] = sum(mat[i,] * vec);
}
return(result)
}
matrixA = matrix(1:12, 3, 4)
vectorA = c(1:4)
matrix_multiplication_academy(matrixA,vectorA)
matrix_multiplication = function(A, x) {
j = 1
m = dim(A)[1]
n = length(x)
y = c()
if (dim(A)[2] != n) {
return("Not a legal multiplication")
} else {
for (i in 1:m) {
y[i] = 0
for (j in 1:n) {
y[i] = y[i] + A[i, j] * x[j]
}
}
}
return(y)
}
system.time(matrix_multiplication(matrixA, vectorA))
system.time(matrix_multiplication_academy(matrixA, vectorA))
MAD2 = function(v){
return(median(abs(v - median(v))))
}
MAD(1:10)
MAD = function(vec){
deviations = c()
for(i in vec){
deviations = c(deviations, abs(vec[i]-median(vec)))
}
return(median(deviations))
}
MAD(1:10)
MAD2(1:10)
v = rnorm(10)
MAD2(v)
?unlist
#Academy Solution
list_letter = c('a', 'b', 'c', 'd', 'e')
list_1 = rep(list_letter, 5)
list_1
#Academy Solution
list_letter = c('a', 'b', 'c', 'd', 'e')
list_1 = rep(list_letter, times = 5)
list_2 = rep(list_letter, each = 5)
list_3 = paste0(list_1, list_2)
list_3
?sapply
sapply(list_letter, paste0)
sapply(list_letter, paste0, list_letter)
sapply(list_letter, paste0, list_letter, list_letter)
library(data.table)
?fread
fread(file = "~/Downloads/database.csv")
murder_database = fread(file = "~/Downloads/database.csv")
View(murder_database)
murder_database %>% group_by(Year, State) %>% summarise(sum(Incident))
library(dplyr)
murder_database %>% group_by(Year, State) %>% summarise(sum(Incident))
murder_database %>% group_by(State) %>% summarise(sum(Incident))
murder_database %>% group_by(State) %>% summarise(Murders = sum(Incident)) %>% arrange(desc(Murders)) %>% top_n(10)
murder_database %>% distinct(., `Record Source`)
murder_database %>% distinct(., State)
murder_database %>% distinct(., Relationship)
murder_database %>% group_by(Relationship) %>% summarise(sum(Incident))
murder_database %>% distinct(., 'Crime Type')
murder_database %>% distinct(., `Crime Type`)
murder_database %>% group_by(Month) %>% summarise(sum(Incident))
murder_database %>% group_by(Month) %>% summarise(sum(Incident)) %>% arrange(desc(sum(Incident)))
murder_database %>% group_by(Month) %>% summarise(sum(Incident)) %>% arrange(., desc(sum(Incident)))
murder_database %>% group_by(Month) %>% summarise(sum(Incident)) %>% arrange(desc('sum(Incident)'))
murder_database %>% group_by(Month) %>% summarise(monthly = sum(Incident)) %>% arrange(desc(monthly))
by_state = murder_database %>% group_by(State) %>% summarise(Murders = sum(Incident))
ggplot(data = by_state) + geom_point()
ggplot(data = by_state, aes(x = State, y = Incident)) + geom_point()
library(ggplot2)
ggplot(data = by_state, aes(x = State, y = Incident)) + geom_point()
ggplot(data = by_state, aes(x = State, y = Murders)) + geom_point()
statepop
library(usmap)
statepop
?usmap
??usmap
library(tidyverse)
library(fiftystater)
install.packages("usmap")
library(usmap)
statepop
install.packages("tidyverse")
install.packages("fiftystater")
library(tidyverse)
data("fifty states")
library(maps)
counties = map_data("county")
ggplot(data = counties, aes(x = long, y = lat)) + geom_polygon(aes(group = group, fill = group))
?map_data
ggplot(data = by_state, aes(x = State, y = Murders)) + geom_point()
gvisGeoChart(data = by_state, locationvar = State)
library(googleVis)
gvisGeoChart(data = by_state, locationvar = State)
gvisGeoChart(data = by_state)
knitr::opts_chunk$set(echo = TRUE)
head(billboard)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
billboard <- readr::read_csv("./data/billboard.csv")
head(billboard)
library(tidyr)
library(tidyverse)
head(table1)
head(table2)  #Messy data example #1
head(table3)  #Messy data example #2.
install.packages("tidyverse")
install.packages("tidyverse")
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r, message=FALSE}
library(tidyverse)
library(tidyverse)
## Messy Data Type #1
```{r}
billboard <- readr::read_csv("./data/billboard.csv")
head(billboard)
```
## gather()
```{r}
billboard2 <- billboard %>%
gather(key="week", value="rank", wk1:wk76, na.rm = TRUE)
head(billboard2)
# The following code works the same
# billboard2 <- billboard %>%
#   gather(key="week", value="rank", -c(1:5), na.rm = TRUE)
```{r}
billboard2 <- billboard %>%
gather(key="week", value="rank", wk1:wk76, na.rm = TRUE)
head(billboard2)
str(billboard2)
billboard3 <- billboard2 %>%
mutate(
week = readr::parse_number(week),
date = readr::parse_date(date.entered) + 7 * (week - 1)) %>%
select(-date.entered)
head(billboard3)
billboard3 <- billboard2 %>%
mutate(
week = readr::parse_number(week),
date = readr::parse_date(date.entered) + 7 * (week - 1)) %>%
select(-date.entered)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
billboard <- readr::read_csv("./data/billboard.csv")
head(billboard)
View(billboard2)
?read.csv()
View(billboard)
billboard3 <- billboard2 %>%
mutate(
week = readr::parse_number(week),
date = readr::parse_date(date.entered) + 7 * (week - 1)) %>%
select(-date.entered)
glimpse(billboard2)
?parse_number
billboard3 <- billboard2 %>%
mutate(
week = readr::parse_number(as.character(week)),
date = readr::parse_date(date.entered) + 7 * (week - 1)) %>%
select(-date.entered)
billboard3 <- billboard2 %>%
billboard3 <- billboard2 %>%
billboard3 <- billboard2 %>%
billboard3 <- billboard2 %>%
mutate(
week = readr::parse_number(week))# %>%
billboard3 <- billboard2 %>%
mutate(
week = readr::parse_number(week)) # %>%
?parse_date
billboard3 <- billboard2 %>%
mutate(
week = readr::parse_number(week),
date = readr::parse_date(date.entered, format = "%Y-$M-%D") + 7 * (week - 1)) %>%
select(-date.entered)
billboard3 <- billboard2 %>%
mutate(
week = readr::parse_number(week),
date = date.entered + 7 * (week - 1)) %>%
select(-date.entered)
head(billboard3)
billboard3 <- billboard2 %>%
mutate(
week = readr::parse_number(week),
date = date.entered + 7 * (week - 1)) #%>%
head(billboard3)
View(billboard3)
```{r}
weather <- readr::read_csv("./data/weather.csv")
head(weather)
weather2 <- weather %>%
gather(day, value, d1:d31, na.rm = TRUE) %>%
mutate(day=readr::parse_number(day))
head(weather2)
weather3 <- weather2 %>% spread(element, value)
head(weather3)
flights = readr::read_csv('./data/flights.csv')
flights = readr::read_csv('./data/flights.csv')
head(flights)
flights2 = separate(flights, route, c("origin", "dest"), sep = "-")
head(flights2)
?separate()
shiny::runApp('Desktop/NYCDSA/Projects/ShinyMurderApp')
#Import database
murder_database = fread(file = "~/Desktop/NYCDSA/Projects/ShinyMurderApp/data/database.csv", stringsAsFactors = T)
murder_database = murder_database %>%
mutate(., `Victim_Age_Category` =
ifelse(`Victim Age`<=9, "0-9",
ifelse(`Victim Age`<=19, "10-19",
ifelse(`Victim Age`<=29, "20-29",
ifelse(`Victim Age`<=39, "30-39",
ifelse(`Victim Age`<=49, "40-49",
ifelse(`Victim Age`<=59, "50-59",
ifelse(`Victim Age` <= 69, "60-69",
ifelse(`Victim Age` != 998, "70+", "Unknown")))))))))
View(murder_database)
##Segement dataset by year and solved state; calculate the total number of murders for each year for solved vs. unsolved murders
yearly_murders_by_solved_df =
murder_database %>%
mutate(., Year = as.factor(Year)) %>%
group_by(., Year, `Crime Solved`) %>%
summarise(., Murders = n()) %>%
spread(., key = `Crime Solved`, value = Murders)
View(yearly_murders_by_solved_df)
##Segement dataset by year and solved state; calculate the total number of murders for each year for solved vs. unsolved murders
yearly_murders_by_solved_df =
murder_database %>%
mutate(., Year = as.factor(Year)) %>%
group_by(., Year, `Crime Solved`) %>%
summarise(., Murders = n()) %>%
spread(., key = `Crime Solved`, value = Murders) %>%
select(., Murders, Yes, No)
View(yearly_murders_by_solved_df)
runApp('Desktop/NYCDSA/Projects/ShinyMurderApp')
yearly_murders_by_solved_df =
murder_database %>%
mutate(., Year = as.factor(Year)) %>%
group_by(., Year, `Crime Solved`) %>%
summarise(., Murders = n()) %>%
spread(., key = `Crime Solved`, value = Murders)
View(yearly_murders_by_solved_df)
yearly_murders_by_solved_df =
murder_database %>%
mutate(., Year = as.factor(Year)) %>%
group_by(., Year, `Crime Solved`) %>%
summarise(., Murders = n())
View(yearly_murders_by_solved_df)
?spread
##Segement dataset by year and solved state; calculate the total number of murders for each year for solved vs. unsolved murders
yearly_murders_by_solved_df =
murder_database %>%
mutate(., Year = as.factor(Year)) %>%
group_by(., Year, `Crime Solved`) %>%
summarise(., Murders = n()) %>%
spread(., key = `Crime Solved`, value = Murders) %>%
mutate(., Total = Yes + No) %>%
select(., Year, Yes, No, Total)
View(yearly_murders_by_solved_df)
##Segement dataset by year and solved state; calculate the total number of murders for each year for solved vs. unsolved murders
yearly_murders_by_solved_df =
murder_database %>%
mutate(., Year = as.factor(Year)) %>%
group_by(., Year, `Crime Solved`) %>%
summarise(., Murders = n()) %>%
spread(., key = `Crime Solved`, value = Murders) %>%
mutate(., Total = Yes + No, Yes = Yes/Total, No = No/Total) %>%
select(., Year, Yes, No, Total)
View(yearly_murders_by_solved_df)
runApp('Desktop/NYCDSA/Projects/ShinyMurderApp')
murder_database %>%
mutate(., Year = as.factor(Year)) %>%
group_by(., Year, State) %>%
summarise(., Murders = n()) %>%
spread(., key = State, value = Murders)
View(murder_database %>%
mutate(., Year = as.factor(Year)) %>%
group_by(., Year, State) %>%
summarise(., Murders = n()) %>%
spread(., key = State, value = Murders))
runApp('Desktop/NYCDSA/Projects/ShinyMurderApp')
runApp('Desktop/NYCDSA/Bootcamp Lectures/Lecture Slides/Data Analysis with R/4. Shiny/Intro to Shiny/flights/flights_final')
runApp('Desktop/NYCDSA/Bootcamp Lectures/Lecture Slides/Data Analysis with R/4. Shiny/Shiny Topics/shinyApps/shinyDashBoard')
runApp('Desktop/NYCDSA/Projects/ShinyMurderApp')
output$topmethod4 = renderInfoBox({})
murder_database %>%
filter(., `Victim Sex` == "Male") %>%
filter(., State !="District of Columbia") %>% group_by(., State) %>%
summarise(., totalvictims = n(),
victimsper1kpeople = n()/mean(Population.in.1000s, na.rm = TRUE)) %>%
arrange(., victimsper1kpeople) %>%
top_n(., 5)
murder_database %>%
filter(., `Victim Sex` == "Male") %>%
filter(., State !="District of Columbia") %>% group_by(., State) %>%
summarise(., totalvictims = n(),
victimsper1kpeople = n()/mean(Population.in.1000s, na.rm = TRUE)) %>% select(., State, victimsper1kpeople)
arrange(., victimsper1kpeople) %>%
top_n(., 5, victimsper1kpeople)
murder_database %>%
filter(., `Victim Sex` == "Male") %>%
filter(., State !="District of Columbia") %>% group_by(., State) %>%
summarise(., totalvictims = n(),
victimsper1kpeople = n()/mean(Population.in.1000s, na.rm = TRUE)) %>% select(., State, victimsper1kpeople) %>%
arrange(., victimsper1kpeople) %>%
top_n(., 5, victimsper1kpeople)
murder_database %>%
filter(., `Victim Sex` == "Male") %>%
filter(., State !="District of Columbia") %>% group_by(., State) %>%
summarise(., totalvictims = n(),
victimsper1kpeople = n()/mean(Population.in.1000s, na.rm = TRUE)) %>% select(., State, victimsper1kpeople) %>%
arrange(., desc(victimsper1kpeople)) %>%
top_n(., 5, victimsper1kpeople)
murder_database %>%
filter(., `Victim Sex` == "Male") %>%
filter(., State !="District of Columbia") %>% group_by(., State) %>%
summarise(., totalvictims = n(),
victimsper1kpeople = n()/mean(Population.in.1000s, na.rm = TRUE)) %>% select(., State, victimsper1kpeople) %>%
top_n(., 5, desc(victimsper1kpeople))
murder_database %>%
filter(., `Victim Sex` == "Male") %>%
filter(., State !="District of Columbia") %>% group_by(., State) %>%
summarise(., totalvictims = n(),
victimsper1kpeople = n()/mean(Population.in.1000s, na.rm = TRUE)) %>% select(., State, victimsper1kpeople) %>%
top_n(., 5, victimsper1kpeople, desc = T)
murder_database %>%
filter(., `Victim Sex` == "Male") %>%
filter(., State !="District of Columbia") %>% group_by(., State) %>%
summarise(., totalvictims = n(),
victimsper1kpeople = n()/mean(Population.in.1000s, na.rm = TRUE)) %>% select(., State, victimsper1kpeople) %>%
arrange(., desc(victimsper1kpeople)) %>%
top_n(., 5)
murder_database %>%
filter(., `Victim Sex` == "Male") %>%
filter(., State !="District of Columbia") %>% group_by(., Weapon) %>%
summarise(., victimsper1kpeople = n()/mean(Population.in.1000s, na.rm = TRUE)) %>%
arrange(., desc(victimsper1kpeople)) %>%
top_n(., 5)
murder_database %>%
filter(., `Victim Sex` == "Male") %>%
filter(., State !="District of Columbia") %>% group_by(., Weapon) %>%
summarise(., totalvictims = n()) %>%
arrange(., desc(totalvictims)) %>%
top_n(., 5)
murder_database %>%
filter(., `Victim Sex` == "Male") %>%
filter(., State !="District of Columbia") %>% group_by(., Weapon) %>%
summarise(., totalvictims = n()) %>%
arrange(., desc(totalvictims)) %>%
top_n(., 5)$totalvictims
murder_database %>%
filter(., `Victim Sex` == "Male") %>%
filter(., State !="District of Columbia") %>% group_by(., Weapon) %>%
summarise(., totalvictims = n()) %>%
arrange(., desc(totalvictims)) %>%
top_n(., 5) %>% .$totalvictims
murder_database %>%
filter(., `Victim Sex` == "Male") %>%
filter(., State !="District of Columbia") %>% group_by(., Weapon) %>%
summarise(., totalvictims = n()) %>%
arrange(., desc(totalvictims)) %>%
top_n(., 5) %>% .$Weapon
runApp('Desktop/NYCDSA/Projects/ShinyMurderApp')
runApp('Desktop/NYCDSA/Projects/ShinyMurderApp')
?
?infoBox
?infoBox
runApp('Desktop/NYCDSA/Projects/ShinyMurderApp')
runApp('Desktop/NYCDSA/Projects/ShinyMurderApp')
setwd("~/Desktop/NYCDSA/Projects/epicurious")
library(data.table)
fread
?fread
epicurious = fread(file = "epicurious.csv", stringsAsFactors = F)
View(epicurious)
sum(is.na(epicurious$recipe))
